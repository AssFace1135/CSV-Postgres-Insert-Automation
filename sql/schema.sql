-- #####################################################################
--
--           REVISED & CORRECTED DATABASE SCHEMA
--
-- #####################################################################
-- Summary of Changes:
-- 1. Naming Convention: Switched to lowercase snake_case without quotes for all
--    identifiers (tables, columns, etc.). This is the standard convention for
--    PostgreSQL and avoids case-sensitivity issues.
-- 2. Indexes: Added non-unique indexes to all foreign key columns. This is
--    CRITICAL for query performance, especially for JOIN operations.
-- 3. Logical Fixes:
--    - `saved_address`: Now allows a customer to have multiple addresses.
--    - `shipping_logistics`: Now correctly links to a specific `order_item`
--      instead of a whole order, which is more accurate for tracking.
--    - `salary`: `employee_id` is now correctly marked as NOT NULL.
--    - `car`: Renamed `add_to_wishlist` to `add_to_wishlist_count` for clarity.
-- 4. Referential Integrity: Added `ON DELETE` actions (CASCADE, SET NULL,
--    RESTRICT) to foreign keys to define behavior when parent records are
--    deleted, preventing orphaned rows and ensuring data consistency.
-- #####################################################################


-- #####################################################################
-- 1. ENUM TYPE DEFINITIONS
-- #####################################################################

CREATE TYPE car_status AS ENUM (
  'available',
  'reserved',
  'sold',
  'in_transit'
);

CREATE TYPE order_status AS ENUM (
  'pending_confirmation',
  'confirmed',
  'processing',
  'shipped',
  'completed',
  'cancelled'
);

CREATE TYPE payment_status AS ENUM (
  'pending',
  'paid',
  'partially_paid',
  'refunded',
  'failed'
);

CREATE TYPE order_item_status AS ENUM (
  'allocated',
  'out_of_stock',
  'cancelled'
);

CREATE TYPE customs_documentation_status AS ENUM (
  'pending',
  'in_progress',
  'completed',
  'requires_attention'
);

CREATE TYPE transaction_status AS ENUM (
  'pending',
  'completed',
  'failed',
  'cancelled',
  'refunded'
);

CREATE TYPE delivery_status AS ENUM (
  'in_transit',
  'delayed',
  'delivered',
  'pending_pickup',
  'returned'
);


-- #####################################################################
-- 2. TABLE CREATION
-- #####################################################################

CREATE TABLE customer (
  customer_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  phone_number VARCHAR(50),
  address_line1 VARCHAR(255),
  address_line2 VARCHAR(255),
  city VARCHAR(100),
  state_province VARCHAR(100),
  postal_code VARCHAR(20),
  country VARCHAR(100),
  registration_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  last_login_date TIMESTAMPTZ,
  total_orders_count INT DEFAULT 0,
  total_spent_jpy DECIMAL(15, 2) DEFAULT 0.00,
  last_activity_date TIMESTAMPTZ,
  loyalty_score INT DEFAULT 0,
  preferred_contact_method VARCHAR
);

CREATE TABLE customer_activity_log (
  activity_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  activity_type VARCHAR(100),
  activity_timestamp TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  details TEXT,
  ip_address VARCHAR,
  user_agent TEXT
);

CREATE TABLE search_history (
  search_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  search_query VARCHAR,
  search_timestamp TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  result_count INT,
  filter_applied TEXT
);

CREATE TABLE product_view_history (
  product_view_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  car_id INT NOT NULL,
  view_timestamp TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  time_on_page_seconds INT,
  source VARCHAR(100)
);

CREATE TABLE customer_preference (
  preference_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  preferred_make VARCHAR(100),
  preferred_model VARCHAR(100),
  min_year INT,
  max_year INT,
  max_budget_jpy DECIMAL(15, 2),
  preferred_specs VARCHAR(50),
  preferred_condition VARCHAR(50)
);

CREATE TABLE saved_address (
  saved_address_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  address_label VARCHAR(100) NOT NULL, -- e.g., 'Home', 'Work'
  shipping_address_line1 VARCHAR(255) NOT NULL,
  shipping_address_line2 VARCHAR(255),
  shipping_city VARCHAR(100) NOT NULL,
  shipping_state_province VARCHAR(100),
  shipping_postal_code VARCHAR(20),
  shipping_country VARCHAR(100) NOT NULL
);

CREATE TABLE auction_supplier (
  supplier_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  supplier_name VARCHAR(255) UNIQUE NOT NULL,
  contact_person VARCHAR(255),
  phone_number VARCHAR(50),
  email VARCHAR(255),
  website VARCHAR(255),
  location VARCHAR(255)
);

CREATE TABLE car_condition_rating (
  condition_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  rating_code VARCHAR(10) UNIQUE NOT NULL,
  description VARCHAR(255)
);

CREATE TABLE engine_type_lookup (
  engine_type_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  engine_code VARCHAR(100) UNIQUE NOT NULL,
  description VARCHAR(255)
);

CREATE TABLE transmission_type_lookup (
  transmission_type_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type_name VARCHAR(50) UNIQUE NOT NULL,
  description VARCHAR(255)
);

CREATE TABLE drivetrain_type_lookup (
  drivetrain_type_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  type_name VARCHAR(50) UNIQUE NOT NULL,
  description VARCHAR(255)
);

CREATE TABLE car (
  car_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  vin VARCHAR(17) UNIQUE NOT NULL,
  chassis_code VARCHAR(50) NOT NULL,
  make VARCHAR(100) NOT NULL,
  model VARCHAR(100) NOT NULL,
  year INT NOT NULL,
  color VARCHAR(50),
  engine_type_id INT,
  transmission_type_id INT,
  drivetrain_type_id INT,
  steering_side VARCHAR(10) NOT NULL DEFAULT 'RHD',
  mileage_km INT,
  condition_id INT,
  current_listing_price_jpy DECIMAL(15, 2) NOT NULL,
  photos_url TEXT,
  description TEXT,
  status car_status NOT NULL DEFAULT 'available',
  date_added_to_inventory TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  auction_lot_number VARCHAR(100),
  supplier_id INT,
  view_count INT DEFAULT 0,
  add_to_cart_count INT DEFAULT 0,
  add_to_wishlist_count INT DEFAULT 0 -- Renamed for clarity
);

CREATE TABLE shopping_cart (
  cart_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT UNIQUE NOT NULL,
  created_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  last_updated_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP)
);

CREATE TABLE cart_item (
  cart_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  cart_id INT NOT NULL,
  car_id INT NOT NULL,
  quantity INT NOT NULL DEFAULT 1,
  added_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP)
);

CREATE TABLE wishlist (
  wishlist_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT UNIQUE NOT NULL,
  created_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  last_updated_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP)
);

CREATE TABLE wishlist_item (
  wishlist_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  wishlist_id INT NOT NULL,
  car_id INT NOT NULL,
  added_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  notification_preference VARCHAR(100)
);

CREATE TABLE employee (
  employee_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  first_name VARCHAR(100) NOT NULL,
  last_name VARCHAR(100) NOT NULL,
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255),
  phone_number VARCHAR(50),
  job_title VARCHAR(100) NOT NULL,
  hire_date DATE NOT NULL,
  is_active BOOLEAN DEFAULT true
);

CREATE TABLE salary (
  salary_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  employee_id INT NOT NULL, -- Fixed: Cannot be NULL
  salary_amount INT,
  from_date TIMESTAMPTZ,
  to_date TIMESTAMPTZ
);

CREATE TABLE "order" ( -- "order" is a reserved keyword, so it must be quoted
  order_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  order_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  total_amount_jpy DECIMAL(15, 2) NOT NULL,
  order_status order_status NOT NULL DEFAULT 'pending_confirmation',
  payment_status payment_status NOT NULL DEFAULT 'pending',
  currency VARCHAR(10) NOT NULL DEFAULT 'JPY',
  exchange_rate_at_order_time DECIMAL(10, 6),
  managed_by_employee_id INT
);

CREATE TABLE order_item (
  order_item_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INT NOT NULL,
  car_id INT NOT NULL,
  unit_price_jpy DECIMAL(15, 2) NOT NULL,
  quantity INT NOT NULL DEFAULT 1,
  item_status order_item_status NOT NULL DEFAULT 'allocated',
  customs_documentation_status customs_documentation_status NOT NULL DEFAULT 'pending'
);

CREATE TABLE payment_transaction (
  transaction_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_id INT NOT NULL,
  payment_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  amount_jpy DECIMAL(15, 2) NOT NULL,
  payment_method VARCHAR(100) NOT NULL,
  transaction_status transaction_status NOT NULL DEFAULT 'pending',
  payment_gateway_ref_id VARCHAR(255)
);

CREATE TABLE shipping_logistics (
  shipping_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  order_item_id INT NOT NULL, -- Changed: Links directly to the order item
  shipping_company_name VARCHAR(255) NOT NULL,
  tracking_number VARCHAR(255) UNIQUE,
  ship_date TIMESTAMPTZ,
  estimated_arrival_date TIMESTAMPTZ,
  actual_arrival_date TIMESTAMPTZ,
  current_location VARCHAR(255),
  shipping_cost_jpy DECIMAL(10, 2),
  delivery_status delivery_status NOT NULL DEFAULT 'in_transit',
  container_id VARCHAR(100)
);

CREATE TABLE review (
  review_id INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  customer_id INT NOT NULL,
  car_id INT NOT NULL,
  rating INT NOT NULL CHECK (rating >= 1 AND rating <= 5),
  comment TEXT,
  review_date TIMESTAMPTZ DEFAULT (CURRENT_TIMESTAMP),
  is_approved BOOLEAN DEFAULT false
);

-- Deprecating Activity_Data as its relationships were complex and likely better handled
-- in a serialized format (e.g., JSONB) within the customer_activity_log table.
-- If needed, it can be re-introduced with a clearer structure.
-- CREATE TABLE activity_data (...);


-- #####################################################################
-- 3. INDEXES
-- #####################################################################

-- Unique constraints for linking tables
CREATE UNIQUE INDEX ON cart_item (cart_id, car_id);
CREATE UNIQUE INDEX ON wishlist_item (wishlist_id, car_id);
CREATE UNIQUE INDEX ON order_item (order_id, car_id);
CREATE UNIQUE INDEX ON review (customer_id, car_id);

-- Indexes for all Foreign Key columns to improve JOIN performance
CREATE INDEX ON customer_activity_log (customer_id);
CREATE INDEX ON search_history (customer_id);
CREATE INDEX ON product_view_history (customer_id);
CREATE INDEX ON product_view_history (car_id);
CREATE INDEX ON customer_preference (customer_id);
CREATE INDEX ON saved_address (customer_id);
CREATE INDEX ON car (engine_type_id);
CREATE INDEX ON car (transmission_type_id);
CREATE INDEX ON car (drivetrain_type_id);
CREATE INDEX ON car (condition_id);
CREATE INDEX ON car (supplier_id);
CREATE INDEX ON cart_item (car_id);
CREATE INDEX ON wishlist_item (car_id);
CREATE INDEX ON salary (employee_id);
CREATE INDEX ON "order" (customer_id);
CREATE INDEX ON "order" (managed_by_employee_id);
CREATE INDEX ON order_item (car_id);
CREATE INDEX ON payment_transaction (order_id);
CREATE INDEX ON shipping_logistics (order_item_id);
CREATE INDEX ON review (car_id);


-- #####################################################################
-- 4. FOREIGN KEY CONSTRAINTS
-- #####################################################################

-- Customer related tables
ALTER TABLE customer_activity_log ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE search_history ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE product_view_history ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE customer_preference ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE shopping_cart ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE wishlist ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE "order" ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE RESTRICT; -- Don't delete customer with orders
ALTER TABLE review ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;
ALTER TABLE saved_address ADD FOREIGN KEY (customer_id) REFERENCES customer (customer_id) ON DELETE CASCADE;

-- Car related tables
ALTER TABLE product_view_history ADD FOREIGN KEY (car_id) REFERENCES car (car_id) ON DELETE CASCADE;
ALTER TABLE car ADD FOREIGN KEY (supplier_id) REFERENCES auction_supplier (supplier_id) ON DELETE SET NULL;
ALTER TABLE cart_item ADD FOREIGN KEY (car_id) REFERENCES car (car_id) ON DELETE CASCADE;
ALTER TABLE wishlist_item ADD FOREIGN KEY (car_id) REFERENCES car (car_id) ON DELETE CASCADE;
ALTER TABLE order_item ADD FOREIGN KEY (car_id) REFERENCES car (car_id) ON DELETE RESTRICT; -- Don't delete a car that has been ordered
ALTER TABLE review ADD FOREIGN KEY (car_id) REFERENCES car (car_id) ON DELETE CASCADE;

-- Car lookup tables
ALTER TABLE car ADD FOREIGN KEY (engine_type_id) REFERENCES engine_type_lookup (engine_type_id) ON DELETE SET NULL;
ALTER TABLE car ADD FOREIGN KEY (transmission_type_id) REFERENCES transmission_type_lookup (transmission_type_id) ON DELETE SET NULL;
ALTER TABLE car ADD FOREIGN KEY (drivetrain_type_id) REFERENCES drivetrain_type_lookup (drivetrain_type_id) ON DELETE SET NULL;
ALTER TABLE car ADD FOREIGN KEY (condition_id) REFERENCES car_condition_rating (condition_id) ON DELETE SET NULL;

-- Cart, Wishlist, and Order hierarchy
ALTER TABLE cart_item ADD FOREIGN KEY (cart_id) REFERENCES shopping_cart (cart_id) ON DELETE CASCADE;
ALTER TABLE wishlist_item ADD FOREIGN KEY (wishlist_id) REFERENCES wishlist (wishlist_id) ON DELETE CASCADE;
ALTER TABLE order_item ADD FOREIGN KEY (order_id) REFERENCES "order" (order_id) ON DELETE CASCADE;
ALTER TABLE payment_transaction ADD FOREIGN KEY (order_id) REFERENCES "order" (order_id) ON DELETE CASCADE;
ALTER TABLE shipping_logistics ADD FOREIGN KEY (order_item_id) REFERENCES order_item (order_item_id) ON DELETE CASCADE; -- Linked to order_item

-- Employee related tables
ALTER TABLE "order" ADD FOREIGN KEY (managed_by_employee_id) REFERENCES employee (employee_id) ON DELETE SET NULL;
ALTER TABLE salary ADD FOREIGN KEY (employee_id) REFERENCES employee (employee_id) ON DELETE CASCADE;

